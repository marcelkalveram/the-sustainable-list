{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var toggleHiddenFn = function toggleHiddenFn(hidden, setHidden) {\n  return function (toggledItem) {\n    var newHidden = hidden;\n\n    if (!newHidden.includes(toggledItem)) {\n      newHidden.push(toggledItem);\n    } else {\n      newHidden = newHidden.filter(function (item) {\n        return toggledItem !== item;\n      });\n    }\n\n    setHidden(_toConsumableArray(newHidden));\n  };\n};\nexport var toggleFilterFn = function toggleFilterFn(selected, setSelected) {\n  return function (toggledItem, type) {\n    var newSelected = selected;\n\n    if (newSelected[type].includes(toggledItem)) {\n      newSelected[type] = newSelected[type].filter(function (item) {\n        return item !== toggledItem;\n      });\n    } else {\n      newSelected[type].push(toggledItem);\n    }\n\n    setSelected(_objectSpread({}, newSelected));\n  };\n};","map":{"version":3,"sources":["/Users/marcelkalveram/dev/projects/the-sustainable-list-next/src/helpers/toggle.js"],"names":["toggleHiddenFn","hidden","setHidden","toggledItem","newHidden","includes","push","filter","item","toggleFilterFn","selected","setSelected","type","newSelected"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,SAAT;AAAA,SAAuB,UAAAC,WAAW,EAAI;AAClE,QAAIC,SAAS,GAAGH,MAAhB;;AACA,QAAI,CAACG,SAAS,CAACC,QAAV,CAAmBF,WAAnB,CAAL,EAAsC;AACpCC,MAAAA,SAAS,CAACE,IAAV,CAAeH,WAAf;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,UAAAC,IAAI;AAAA,eAAIL,WAAW,KAAKK,IAApB;AAAA,OAArB,CAAZ;AACD;;AACDN,IAAAA,SAAS,oBAAKE,SAAL,EAAT;AACD,GAR6B;AAAA,CAAvB;AAUP,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,WAAX;AAAA,SAA2B,UACvDR,WADuD,EAEvDS,IAFuD,EAGpD;AACH,QAAMC,WAAW,GAAGH,QAApB;;AACA,QAAIG,WAAW,CAACD,IAAD,CAAX,CAAkBP,QAAlB,CAA2BF,WAA3B,CAAJ,EAA6C;AAC3CU,MAAAA,WAAW,CAACD,IAAD,CAAX,GAAoBC,WAAW,CAACD,IAAD,CAAX,CAAkBL,MAAlB,CAAyB,UAAAC,IAAI;AAAA,eAAIA,IAAI,KAAKL,WAAb;AAAA,OAA7B,CAApB;AACD,KAFD,MAEO;AACLU,MAAAA,WAAW,CAACD,IAAD,CAAX,CAAkBN,IAAlB,CAAuBH,WAAvB;AACD;;AACDQ,IAAAA,WAAW,mBAAME,WAAN,EAAX;AACD,GAX6B;AAAA,CAAvB","sourcesContent":["export const toggleHiddenFn = (hidden, setHidden) => toggledItem => {\n  let newHidden = hidden;\n  if (!newHidden.includes(toggledItem)) {\n    newHidden.push(toggledItem);\n  } else {\n    newHidden = newHidden.filter(item => toggledItem !== item);\n  }\n  setHidden([...newHidden]);\n};\n\nexport const toggleFilterFn = (selected, setSelected) => (\n  toggledItem,\n  type,\n) => {\n  const newSelected = selected;\n  if (newSelected[type].includes(toggledItem)) {\n    newSelected[type] = newSelected[type].filter(item => item !== toggledItem);\n  } else {\n    newSelected[type].push(toggledItem);\n  }\n  setSelected({ ...newSelected });\n};\n"]},"metadata":{},"sourceType":"module"}