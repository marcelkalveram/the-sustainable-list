{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useMemo, useReducer } from 'react'; // data\n\nimport data from '../data';\nimport { criteriaMap } from '../config/criteriaMap';\nimport { filterBrands } from '../helpers/filter';\nimport { sortByAz, sortByPrice } from '../helpers/sort';\nimport { actions, initialState, reducer } from '../store'; // UI\n\nimport { Layout } from '../components/Layout/Layout';\nimport { Main } from '../components/Main/Main';\nimport { Header } from '../components/Header/Header';\nimport { Sort } from '../components/Sort/Sort';\nimport { Brands } from '../components/Brands/Brands';\nimport { Filters } from '../components/Filters/Filters';\nexport default function Index() {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState); // filter\n\n  let brands = useMemo(() => data.brands.filter(brands => filterBrands(brands, state.selected)), [state.selected]); // search for filter\n\n  if (state.searchFor !== '') {\n    brands = brands.filter(brand => brand.fields.title.toLowerCase().includes(state.searchFor.toLowerCase()));\n  } // sort by price\n\n\n  if (state.sortBy.price !== null) {\n    brands.sort((a, b) => sortByPrice(state, a, b));\n  } // sort by az\n\n\n  if (state.sortBy.az !== null) {\n    brands.sort((a, b) => sortByAz(state, a, b));\n  }\n\n  return __jsx(Layout, {\n    fixed: state.showFilters\n  }, __jsx(Filters, {\n    criteriaMap: criteriaMap,\n    filters: state.filters,\n    selected: state.selected,\n    setSelected: selected => dispatch({\n      type: actions.SET_SELECTED,\n      payload: selected\n    }),\n    showFilters: state.showFilters,\n    setShowFilters: show => dispatch({\n      type: actions.SET_SHOW_FILTERS,\n      payload: show\n    })\n  }), __jsx(Main, null, __jsx(Sort, {\n    searchFor: state.searchFor,\n    setSearchFor: searchTerm => dispatch({\n      type: actions.SET_SEARCH_FOR,\n      payload: searchTerm\n    }),\n    totalCount: state.brandsCount,\n    count: state.brands.length,\n    sortBy: state.sortBy,\n    setSortBy: sortBy => dispatch({\n      type: actions.SET_SORT_BY,\n      payload: sortBy\n    }),\n    setShowFilters: show => dispatch({\n      type: actions.SET_SHOW_FILTERS,\n      payload: show\n    })\n  }), __jsx(Brands, {\n    criteriaMap: criteriaMap,\n    brands: brands,\n    selected: state.selected\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}