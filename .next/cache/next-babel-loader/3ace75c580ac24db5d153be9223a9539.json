{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const toggleHiddenFn = (hidden, setHidden) => toggledItem => {\n  let newHidden = hidden;\n\n  if (!newHidden.includes(toggledItem)) {\n    newHidden.push(toggledItem);\n  } else {\n    newHidden = newHidden.filter(item => toggledItem !== item);\n  }\n\n  setHidden([...newHidden]);\n};\nexport const toggleFilterFn = (selected, setSelected) => (toggledItem, type) => {\n  const newSelected = selected;\n\n  if (newSelected[type].includes(toggledItem)) {\n    newSelected[type] = newSelected[type].filter(item => item !== toggledItem);\n  } else {\n    newSelected[type].push(toggledItem);\n  }\n\n  setSelected(_objectSpread({}, newSelected));\n};","map":null,"metadata":{},"sourceType":"module"}