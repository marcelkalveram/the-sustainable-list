{"ast":null,"code":"var _jsxFileName = \"/Users/marcelkalveram/dev/projects/the-sustainable-list-next/src/components/Filters/FilterCheckboxes.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport { Pane } from 'evergreen-ui';\nimport { CheckboxCountry } from './CheckboxCountry';\nimport { CheckboxGeneric } from './CheckboxGeneric';\n\nconst getLocation = (val, prop) => val.fields.country;\n\nexport const FilterCheckboxes = ({\n  hidden,\n  filters,\n  toggleFilter,\n  selected,\n  name\n}) => {\n  const countries = useMemo(() => filters['location'].reduce((unique, item) => {\n    return unique.filter(u => u === getLocation(item)).length ? unique : unique.concat(getLocation(item));\n  }, []), [filters]);\n  let checkboxes = [];\n\n  if (name === 'location') {\n    checkboxes = countries.map(country => __jsx(CheckboxCountry, {\n      selected: selected,\n      country: country,\n      toggleFilter: toggleFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n  if (name !== 'location') {\n    checkboxes = filters[name].map(element => __jsx(CheckboxGeneric, {\n      selected: selected,\n      name: name,\n      element: element,\n      toggleFilter: toggleFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n  return __jsx(Pane, {\n    display: hidden.includes(name) ? 'none' : 'block',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, checkboxes);\n};","map":{"version":3,"sources":["/Users/marcelkalveram/dev/projects/the-sustainable-list-next/src/components/Filters/FilterCheckboxes.js"],"names":["React","useMemo","Pane","CheckboxCountry","CheckboxGeneric","getLocation","val","prop","fields","country","FilterCheckboxes","hidden","filters","toggleFilter","selected","name","countries","reduce","unique","item","filter","u","length","concat","checkboxes","map","element","includes"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,CAACE,MAAJ,CAAWC,OAA9C;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,MAD+B;AAE/BC,EAAAA,OAF+B;AAG/BC,EAAAA,YAH+B;AAI/BC,EAAAA,QAJ+B;AAK/BC,EAAAA;AAL+B,CAAD,KAM1B;AACJ,QAAMC,SAAS,GAAGf,OAAO,CACvB,MACEW,OAAO,CAAC,UAAD,CAAP,CAAoBK,MAApB,CAA2B,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC3C,WAAOD,MAAM,CAACE,MAAP,CAAcC,CAAC,IAAIA,CAAC,KAAKhB,WAAW,CAACc,IAAD,CAApC,EAA4CG,MAA5C,GACHJ,MADG,GAEHA,MAAM,CAACK,MAAP,CAAclB,WAAW,CAACc,IAAD,CAAzB,CAFJ;AAGD,GAJD,EAIG,EAJH,CAFqB,EAOvB,CAACP,OAAD,CAPuB,CAAzB;AAUA,MAAIY,UAAU,GAAG,EAAjB;;AAEA,MAAIT,IAAI,KAAK,UAAb,EAAyB;AACvBS,IAAAA,UAAU,GAAGR,SAAS,CAACS,GAAV,CAAchB,OAAO,IAChC,MAAC,eAAD;AACE,MAAA,QAAQ,EAAEK,QADZ;AAEE,MAAA,OAAO,EAAEL,OAFX;AAGE,MAAA,YAAY,EAAEI,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;AAOD;;AAED,MAAIE,IAAI,KAAK,UAAb,EAAyB;AACvBS,IAAAA,UAAU,GAAGZ,OAAO,CAACG,IAAD,CAAP,CAAcU,GAAd,CAAkBC,OAAO,IACpC,MAAC,eAAD;AACE,MAAA,QAAQ,EAAEZ,QADZ;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,OAAO,EAAEW,OAHX;AAIE,MAAA,YAAY,EAAEb,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;AAQD;;AAED,SACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEF,MAAM,CAACgB,QAAP,CAAgBZ,IAAhB,IAAwB,MAAxB,GAAiC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0DS,UAA1D,CADF;AAGD,CA3CM","sourcesContent":["import React, { useMemo } from 'react';\nimport { Pane } from 'evergreen-ui';\nimport { CheckboxCountry } from './CheckboxCountry';\nimport { CheckboxGeneric } from './CheckboxGeneric';\n\nconst getLocation = (val, prop) => val.fields.country;\n\nexport const FilterCheckboxes = ({\n  hidden,\n  filters,\n  toggleFilter,\n  selected,\n  name,\n}) => {\n  const countries = useMemo(\n    () =>\n      filters['location'].reduce((unique, item) => {\n        return unique.filter(u => u === getLocation(item)).length\n          ? unique\n          : unique.concat(getLocation(item));\n      }, []),\n    [filters],\n  );\n\n  let checkboxes = [];\n\n  if (name === 'location') {\n    checkboxes = countries.map(country => (\n      <CheckboxCountry\n        selected={selected}\n        country={country}\n        toggleFilter={toggleFilter}\n      />\n    ));\n  }\n\n  if (name !== 'location') {\n    checkboxes = filters[name].map(element => (\n      <CheckboxGeneric\n        selected={selected}\n        name={name}\n        element={element}\n        toggleFilter={toggleFilter}\n      />\n    ));\n  }\n\n  return (\n    <Pane display={hidden.includes(name) ? 'none' : 'block'}>{checkboxes}</Pane>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}